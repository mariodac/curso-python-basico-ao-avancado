# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes derivadas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatua do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o
# Sobrecarga de m√©todos (overload)      üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override)    üêç = ‚úÖ

from abc import ABC, abstractmethod
class Notification(ABC):
    def __init__(self, msg) -> None:
        self.msg = msg

    @abstractmethod
    def send(self) -> bool: ...

class NotificationEmail(Notification):

    def send(self) -> bool: 
        print('E-mail: enviando - ', self.msg)
        return False

class NotificationSms(Notification):

    def send(self) -> bool: 
        print('SMS: enviando - ', self.msg)
        return True

def notificate(notification: Notification):
    sent_notification = notification.send()

    if sent_notification:
        print('Notifica√ß√£o enviada com sucesso!')
    else:
        print('N√£o foi poss√≠vel enviar a notifica√ß√£o!')

n = NotificationSms('testando')
n.send()
notificate(n)
notificate(NotificationEmail('Hello E-mail'))


